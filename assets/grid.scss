// 1. Font family
//font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
//$font-family: 'Anonymous Pro', monospace;
$font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;

// Notes on font family
// - from Google fonts select only sans-serif & order by Number of styles
// - a font should have at least bold version, italic would be fine
// - the requirements however are set by typographic element decorations

// 2. Font size
$font-size: 87.5%;

// 3. Line height
$line-height: 1.25;

// 4. Gutter, ie $font-size combined with $line-height
$gutter: 1.25em;

// 5. Characters per row
$characters-per-row: 60;

// 6. Text width
// - For readability concerns it's width equals around 40-60 characters
// - Based on Text width the Grid with is calculated
// - This formula is a guess, it was measured by hand
$text-width: $characters-per-row * $gutter/2;


// 7. Grid width
// - Grid refers to other elements than text, it is more granulated than the Text
// - Text width is divided into 2 or 3 more columns, according to the nr. of characters per row (40 or 60)
$grid-width: $text-width / 5;

// Notes on Responsiveness
// - with $characters-per-row 40, 60 divided by 2, 3 we got a strange grid on mobiles
// - making the grid more granular, ie $charachters-per-row 50 divided by 4 we have a two column, good fitting grid also on mobiles.
// - these two values must be fine tuned until a fine grid is obtained on all devices

// Notes on font family & Responsiveness
// - changing the font-family breaks the grid
// - with Helvetica the 50/4 grid was ok, with Inconsolata the 55/4 grid was perfect


// 8. Text height
// - four lines of text, it has nothing to do with the $text-width
$text-height: $gutter*4;
$grid-height: $text-height;


// 9. Text grid width
// - The area of a Text grid, now measured in grid cells, ie. the gutters must be added to the original $text-width
$text-grid-width: 4 * $grid-width + 3 * $gutter;



@mixin typographic-grid {
  font-family: $font-family;
  font-size: $font-size;
  line-height: $line-height;
}






// v1
// Responsiveness
// Every element has own breakpoints and responsive rules
// Instead of device dependent breakpoints we use column dependent breakpoints whenever possible. ie single column, two-column
// ------------------------------------------------------------



$breakpoint-large-screen: 90em; // 1440px
$breakpoint-small-screen: 64em; // 1024px
$breakpoint-normal-screen: 85.375em; // 1366px
$breakpoint-mobile: 30em; // 480px



// 1. Text box for header and footer
@mixin text-grid {
  width: $text-grid-width;
  float: left;
  margin-right: $gutter;
  
  $breakpoint-double-column: col(4);
  @media only screen and (max-width: $breakpoint-double-column - 0.001) {
    width: 100%;
    max-width: $text-grid-width;
    margin-right: 0;
    margin-bottom: $gutter;
  }
}




// 3. Footer
// -------------
@mixin footer-grid {
  margin-top: row(1);
  margin-bottom: row(1);
  
  @media only screen and (min-width: $breakpoint-small-screen) {
    margin-left: col(1);
  }
}




// 2. Portfolio items
// ------------------
@mixin portfolio-grid {
  @include columns(2);
  @include rows(2);
  
  $breakpoint-double-column: col(4);
  @media only screen and (max-width: $breakpoint-double-column - 0.001) {
    @include block;
    height: auto;
    margin-bottom: $gutter;
  }
  
  @media only screen and (min-width: $breakpoint-large-screen + 0.001) {
    @include columns(3);
    @include rows(3);
  }
}



// 4. Single portfolio item grid
// -----------------------------
@mixin single-portfolio-grid($col, $figure, $row) {
  @include columns($col, responsive);
  
  figure {
    @include columns($figure, responsive);
  }

  @include rows($row);
  @media only screen and (max-width: $breakpoint-mobile - 0.001) {
    height: auto;
    margin-bottom: $gutter; 
  }
}



// 5. Single portfolio item with story
@mixin story-grid($margin, $aside) {
  @include columns($margin + $aside + 1, responsive);
  position: relative;
  
  aside {
    @include columns($aside);
    margin-left: col($margin) + $gutter;
    position: absolute;
  }
  
  $breakpoint-story: col($margin + $aside);
  @media only screen and (max-width: $breakpoint-story - 0.001) {
    height: auto;
    
    aside {
      @include block;
      max-width: col($aside);
      margin-left: 0;
      margin-top: $gutter;
      margin-bottom: $gutter;
      position: relative;
    }
  }
}



// 6. Article
@mixin article-grid {
  @include text-grid;
  margin-left: col(1);
  margin-right: col(3);
  
  $breakpoint-double-column: ($text-grid-width + col(1)) * 2;
  @media only screen and (max-width: $breakpoint-double-column)  {
    ol, ul {
      margin-left: $gutter + $gutter/4;
    }
  }
  
  $breakpoint-triple-column: ($text-grid-width + col(1)) * 3;
  @media only screen and (min-width: $breakpoint-triple-column)  {
    &.move-left {
      margin-right: $text-grid-width + col(1);
    }
  }
}




@mixin columns($nr, $responsive: false) {
  @if ($responsive == false) {
    width: col($nr);
  } @else {
    width: 100%;
    max-width: col($nr);
  }
  
  margin-right: $gutter;
  float: left;
}

@mixin rows($nr) {
  height: row($nr);
}




@function col($nr) {
  @if ($nr == 1) {
    @return $grid-width + $gutter;
  } @else {
    @return $nr * $grid-width + ($nr - 1) * $gutter;    
  }
}

@function row($nr) {
  @return $nr * ($grid-height + $gutter);
}
